{"version":3,"sources":["App/Components/StoreToolBar/StoreToolBarStyles.ts","App/Components/StoresList/useStoresList.ts","App/Components/Store/StoreCardStyles.ts","App/Components/Store/StoreCard.tsx","App/Components/ItemsList/ListStyles.ts","App/Components/StoresList/StoresList.tsx","Context/StoreItemsContext.tsx","App/Components/ItemsList/useItemsList.ts","App/Components/StoreItem/StoreItemStyles.ts","App/Components/StoreItem/StoreItem.tsx","App/Components/ItemsList/ItemsList.tsx","App/Components/StoreToolBar/StoreToolBar.tsx","App/Components/BoughtItems/BoughtItems.tsx","App/Components/ReceivedItems/ReceivedItems.tsx","App/Components/App.tsx","index.tsx"],"names":["useStyles","makeStyles","toolBar","paddingLeft","display","justifyContent","flexDirection","backgroundColor","useStoreList","storeItems","useContext","StoreItemsContext","getNumberOfStoreProducts","currStoreId","filter","currItem","store","id","length","margin","width","height","StoreCard","storeProps","classes","currStore","numOfItems","Card","className","Typography","name","mainList","allStores","StoresList","useStoresList","map","allStoreItems","deliveryDate","Date","isReceived","priceILS","priceUSD","React","createContext","StoreItemsProvider","children","useState","setStoreItems","Provider","value","apiUrl","process","REACT_APP_API_URL","useItemsList","parameters","shekelToUSDExchangeRate","setShekelToUSDExchangeRate","getCurrExChangeRates","a","axios","get","apiResponse","status","fetchingErrorMsg","exchangeRateResponse","data","rates","USD","Swal","fire","icon","title","updateNotReceivedItemsList","receivedId","receivedItemIndex","findIndex","i","updatedStoreItems","getSortedItems","slice","sort","itemA","itemB","getTime","usetyles","card","row","description","marginLeft","currencySwitch","StoreItem","itemProps","showReceivedButton","receiveItem","exchangeRate","ILSChecked","setILSChecked","useEffect","CardContent","ShoppingBasket","Storefront","LocalShipping","toDateString","Money","toFixed","Grid","component","container","alignItems","spacing","item","AttachMoney","Switch","checked","color","onChange","event","target","CardActions","Divider","Button","onClick","apiInterval","REACT_APP_API_INTERVAL","ItemsList","itemsListProps","interval","setInterval","Number","clearInterval","singleItem","showButton","StoreToolBar","isItemsList","useLocation","pathname","currentTab","setCurrentTab","tabs","tabId","displayComponent","AppBar","position","Tabs","centered","tab","Tab","label","Link","to","BoughtItems","ReceivedItems","App","exact","path","from","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98409163.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    toolBar: {\r\n        paddingLeft: '26vw',\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n        flexDirection: 'row',\r\n        backgroundColor: 'rgb(25, 118, 210)',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import { useContext } from 'react';\r\n\r\nimport { Item } from 'Models/Item';\r\nimport { StoreItemsContext } from 'Context/StoreItemsContext';\r\nimport { StoreItemsContextType } from 'Context/StoreItemsContextType';\r\n\r\nconst useStoreList = (): useStoreListOutCome => {\r\n    const { storeItems } = useContext(StoreItemsContext) as StoreItemsContextType;\r\n\r\n    const getNumberOfStoreProducts = (currStoreId: number) => {\r\n        return storeItems.filter((currItem: Item) => currItem.store.id === currStoreId).length;\r\n    }\r\n\r\n    return { getNumberOfStoreProducts };\r\n}\r\n\r\ninterface useStoreListOutCome {\r\n    getNumberOfStoreProducts: (currStoreId: number) => number;\r\n}\r\n\r\nexport default useStoreList;","import { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    store: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        margin: '2vh 1vw',\r\n        width: '13vw',\r\n        height: '12vh',\r\n\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import React from 'react';\r\nimport { Card, Typography } from '@material-ui/core';\r\n\r\nimport useStyles from './StoreCardStyles';\r\n\r\nimport { Store } from 'Models/Store';\r\n\r\nconst StoreCard: React.FC<Props> = (storeProps: Props): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { currStore, numOfItems } = storeProps;\r\n\r\n    return (\r\n        <Card className={classes.store}>\r\n            <Typography>{`Store Name: ${currStore.name}`}</Typography>\r\n            <Typography>{`Number of Current Items: ${numOfItems}`}</Typography>\r\n        </Card>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    currStore: Store;\r\n    numOfItems: number;\r\n}\r\n\r\nexport default StoreCard;\r\n\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    mainList: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import React from 'react';\r\n\r\nimport useStoresList from './useStoresList';\r\n\r\nimport { Store } from 'Models/Store';\r\nimport StoreCard from '../Store/StoreCard';\r\nimport useStyles from '../ItemsList/ListStyles';\r\n\r\nexport const allStores: Store[] = [\r\n    {\r\n        id: 1,\r\n        name: 'Amazon'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'eBay'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Ali Express'\r\n    }];\r\n\r\nconst StoresList: React.FC = (): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { getNumberOfStoreProducts } = useStoresList();\r\n\r\n    return (\r\n        <div className={classes.mainList}>\r\n            {\r\n                allStores.map((currStore: Store) => {\r\n                    return <StoreCard currStore={currStore} numOfItems={getNumberOfStoreProducts(currStore.id)} />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  StoresList;","import React, { useState } from 'react';\r\n\r\nimport { Item } from 'Models/Item';\r\nimport { allStores } from 'App/Components/StoresList/StoresList';\r\n\r\nimport { StoreItemsContextType } from './StoreItemsContextType';\r\n\r\nexport const allStoreItems: Item[] = [\r\n    {\r\n        id: 0,\r\n        name: 'Iphone 12',\r\n        deliveryDate: new Date('2021-04-01'),\r\n        isReceived: false,\r\n        priceILS: 100,\r\n        priceUSD: 0,\r\n        store: allStores[0]\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'GoPro',\r\n        deliveryDate: new Date('2020-10-11'),\r\n        isReceived: false,\r\n        priceILS: 100,\r\n        priceUSD: 0,\r\n        store: allStores[1]\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Garmin Watch',\r\n        deliveryDate: new Date('2021-02-11'),\r\n        isReceived: true,\r\n        priceILS: 100,\r\n        priceUSD: 0,\r\n        store: allStores[2]\r\n    }\r\n];\r\n\r\nexport const StoreItemsContext = React.createContext<StoreItemsContextType | null>(null);\r\n\r\nconst StoreItemsProvider: React.FC= ({ children }) => {\r\n    const [storeItems, setStoreItems] = useState<Item[]>(allStoreItems);\r\n\r\n    return (\r\n        <StoreItemsContext.Provider value={{storeItems, setStoreItems}}>\r\n            { children }\r\n        </StoreItemsContext.Provider>\r\n    );\r\n}\r\n\r\nexport default StoreItemsProvider;","import axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\nimport React, { useContext } from 'react';\r\n\r\nimport { Item } from 'Models/Item';\r\nimport { StoreItemsContext} from 'Context/StoreItemsContext';\r\nimport {ExchangeRatesResponse} from 'Models/ExchangeRatesResponse';\r\nimport { StoreItemsContextType } from 'Context/StoreItemsContextType';\r\n\r\nconst USD_SYMBOL = 'USD';\r\nconst ILS_SYMBOL = 'ILS';\r\nconst OK_STATUS = 200;\r\nconst apiUrl = process.env.REACT_APP_API_URL;\r\n\r\nconst useItemsList = (parameters: useItemsListInCome): useItemsListOutCome => {\r\n    const { storeItems, setStoreItems } = useContext(StoreItemsContext) as StoreItemsContextType;\r\n    const { shekelToUSDExchangeRate, setShekelToUSDExchangeRate} = parameters;\r\n\r\n    const updateNotReceivedItemsList = (receivedId: number) => {\r\n        const receivedItemIndex: number = storeItems.findIndex((i: Item) => i.id === receivedId);\r\n        if(receivedItemIndex !== -1) {\r\n            const updatedStoreItems: Item[] = storeItems;\r\n            updatedStoreItems[receivedItemIndex] = {\r\n                ...updatedStoreItems[receivedItemIndex],\r\n                isReceived: true\r\n            };\r\n            setStoreItems([...updatedStoreItems]);\r\n        }\r\n    }\r\n\r\n    const getSortedItems = (): Item[] => {\r\n        return storeItems.slice().sort((itemA: Item, itemB: Item) => itemA.deliveryDate.getTime() - itemB.deliveryDate.getTime());\r\n    }\r\n\r\n    const getCurrExChangeRates = async () => {\r\n        try {\r\n            const apiResponse = await axios.get(\r\n                `${apiUrl}?base=${ILS_SYMBOL}&symbols=${USD_SYMBOL}`);\r\n            if(apiResponse.status !== OK_STATUS) {\r\n                fetchingErrorMsg();\r\n            } else {\r\n                const exchangeRateResponse: ExchangeRatesResponse = apiResponse.data;\r\n                exchangeRateResponse.rates.USD !== shekelToUSDExchangeRate &&\r\n                setShekelToUSDExchangeRate(exchangeRateResponse.rates.USD);\r\n            }\r\n        } catch (exception) {\r\n            fetchingErrorMsg();\r\n        }\r\n    }\r\n\r\n    const fetchingErrorMsg = () => {\r\n        return Swal.fire({\r\n            icon: 'error',\r\n            title: 'Error in fetching exchange rates!'\r\n        });\r\n    }\r\n\r\n    return { updateNotReceivedItemsList, getCurrExChangeRates, getSortedItems };\r\n}\r\n\r\ninterface useItemsListInCome {\r\n    shekelToUSDExchangeRate: number;\r\n    setShekelToUSDExchangeRate: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\ninterface useItemsListOutCome {\r\n    updateNotReceivedItemsList: (receivedId: number) => void;\r\n    getCurrExChangeRates: () => void;\r\n    getSortedItems: () => Item[];\r\n}\r\n\r\nexport default useItemsList;","import { makeStyles } from '@material-ui/core';\r\n\r\nconst usetyles = makeStyles(() => ({\r\n    card: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: '2vh 1vw',\r\n        width: '16vw',\r\n    },\r\n    row: {\r\n      display: 'flex',\r\n    },\r\n    description: {\r\n      marginLeft: '0.25vw',\r\n    },\r\n    currencySwitch: {\r\n        marginLeft: '-0.5vw'\r\n    }\r\n}));\r\n\r\nexport default usetyles;","import React, {useEffect, useState} from 'react';\r\nimport { LocalShipping, Storefront, Money, AttachMoney, ShoppingBasket } from '@material-ui/icons';\r\nimport {Button, Card, CardActions, CardContent, Divider, Grid, Switch, Typography} from '@material-ui/core';\r\n\r\nimport { Item } from 'Models/Item';\r\n\r\nimport usetyles from './StoreItemStyles';\r\n\r\nconst StoreItem: React.FC<Props> = (itemProps: Props): JSX.Element => {\r\n    const { currItem, showReceivedButton, receiveItem, exchangeRate } = itemProps;\r\n    const [ILSChecked, setILSChecked] = useState<boolean>(true);\r\n    const classes = usetyles();\r\n\r\n    useEffect(() => {\r\n        currItem.priceUSD = currItem.priceILS * exchangeRate;\r\n    },[exchangeRate]);\r\n\r\n    const handleCurrencyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setILSChecked(event.target.checked);\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <div className={classes.row}>\r\n                    <ShoppingBasket />\r\n                    <Typography className={classes.description}>{currItem.name}</Typography>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <Storefront />\r\n                    <Typography className={classes.description}>{currItem.store.name}</Typography>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <LocalShipping />\r\n                    <Typography className={classes.description}>\r\n                        Delivery Date: {currItem.deliveryDate.toDateString()}\r\n                    </Typography>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <Money />\r\n                    <Typography className={classes.description}>\r\n                        Price: {ILSChecked ? currItem.priceILS.toFixed() : currItem.priceUSD.toFixed()}\r\n                    </Typography>\r\n                </div>\r\n                <div className={classes.row}>\r\n                    <Grid component='label' container alignItems='center' spacing={1} className={classes.currencySwitch}>\r\n                        <Grid item><AttachMoney /></Grid>\r\n                        <Grid item>USD</Grid>\r\n                        <Grid item>\r\n                            <Switch\r\n                                checked={ILSChecked}\r\n                                color={'primary'}\r\n                                onChange={handleCurrencyChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>ILS</Grid>\r\n                    </Grid>\r\n                </div>\r\n            </CardContent>\r\n            {showReceivedButton &&\r\n                <CardActions>\r\n                    <Divider />\r\n                    <Button onClick={() => receiveItem(currItem.id)}>Received</Button>\r\n                </CardActions>\r\n            }\r\n        </Card>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    currItem: Item;\r\n    exchangeRate: number;\r\n    showReceivedButton: boolean;\r\n    receiveItem: (receivedId: number) => void;\r\n}\r\n\r\nexport default StoreItem;","import React, {useContext, useEffect, useState} from 'react';\r\n\r\nimport useItemsList from './useItemsList';\r\n\r\nimport { Item } from 'Models/Item';\r\nimport useStyles from './ListStyles';\r\nimport StoreItem from '../StoreItem/StoreItem';\r\nimport {StoreItemsContext} from 'Context/StoreItemsContext';\r\nimport {StoreItemsContextType} from 'Context/StoreItemsContextType';\r\n\r\nconst apiInterval = process.env.REACT_APP_API_INTERVAL;\r\n\r\nconst ItemsList: React.FC<Props> = (itemsListProps: Props): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { storeItems } = useContext(StoreItemsContext) as StoreItemsContextType;\r\n    const [shekelToUSDExchangeRate, setShekelToUSDExchangeRate] = useState<number>(0);\r\n    const { updateNotReceivedItemsList, getCurrExChangeRates, getSortedItems } = useItemsList({ shekelToUSDExchangeRate, setShekelToUSDExchangeRate });\r\n\r\n    useEffect((() => {\r\n        getCurrExChangeRates();\r\n        if(apiInterval) {\r\n            const interval = setInterval(() => {\r\n                getCurrExChangeRates();\r\n            }, Number(apiInterval));\r\n            return () => clearInterval(interval);\r\n        }\r\n    }));\r\n\r\n    return (\r\n        <div className={classes.mainList}>\r\n            {\r\n                getSortedItems().map((singleItem: Item) =>\r\n                    (itemsListProps.showButton ? !singleItem.isReceived : singleItem.isReceived) &&\r\n                        <StoreItem\r\n                            currItem={singleItem}\r\n                            showReceivedButton={itemsListProps.showButton}\r\n                            receiveItem={updateNotReceivedItemsList}\r\n                            exchangeRate={shekelToUSDExchangeRate}\r\n                        />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    showButton: boolean;\r\n}\r\n\r\nexport default  ItemsList;\r\n","import React from 'react';\r\nimport {useLocation, Link} from 'react-router-dom';\r\nimport {AppBar, Button, Tab, Tabs} from '@material-ui/core';\r\n\r\nimport useStyles from './StoreToolBarStyles';\r\n\r\nimport { TabObj } from 'Models/TabObj';\r\nimport ItemsList from '../ItemsList/ItemsList';\r\nimport StoreItemsProvider from 'Context/StoreItemsContext';\r\nimport StoresList from '../StoresList/StoresList';\r\n\r\nconst StoreToolBar: React.FC = (): JSX.Element => {\r\n    const classes = useStyles();\r\n    const isItemsList: boolean = useLocation().pathname === '/list';\r\n    const [currentTab, setCurrentTab] = React.useState<number>(0);\r\n\r\n    const tabs: TabObj[] = [\r\n        {\r\n            tabId: 0,\r\n            name: 'Stores',\r\n            displayComponent: <StoresList />\r\n        },\r\n        {\r\n            tabId: 1,\r\n            name: 'Items',\r\n            displayComponent: <ItemsList showButton={isItemsList}/>\r\n        }];\r\n\r\n    return (\r\n        <>\r\n             <AppBar position=\"static\" className={classes.toolBar}>\r\n                 <Tabs centered value={currentTab} >\r\n                     {\r\n                         tabs.map((tab: TabObj) => {\r\n                             return (\r\n                                 <Tab\r\n                                     onClick={() => setCurrentTab(tab.tabId)}\r\n                                     key={tab.tabId}\r\n                                     label={tab.name}\r\n                                 >\r\n                                 </Tab>\r\n                             )\r\n                         })\r\n                     }\r\n                 </Tabs>\r\n                <Button component={Link} to={isItemsList ? '/received' : '/'}>\r\n                    {isItemsList ? 'TO RECEIVED ITEMS LIST' : 'TO STORE ITEMS LIST'}\r\n                </Button>\r\n            </AppBar>\r\n            <StoreItemsProvider>\r\n                {tabs[currentTab].displayComponent}\r\n            </StoreItemsProvider>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StoreToolBar;","import React from 'react';\r\n\r\nimport StoreToolBar from '../StoreToolBar/StoreToolBar';\r\n\r\nconst BoughtItems: React.FC = (): JSX.Element => {\r\n    return (\r\n            <StoreToolBar />\r\n    );\r\n}\r\n\r\nexport default BoughtItems;\r\n","import React from 'react';\r\n\r\nimport StoreToolBar from '../StoreToolBar/StoreToolBar';\r\n\r\nconst ReceivedItems: React.FC = (): JSX.Element => {\r\n    return (\r\n        <StoreToolBar />\r\n    );\r\n}\r\n\r\nexport default ReceivedItems;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\n\nimport BoughtItems from './BoughtItems/BoughtItems';\nimport ReceivedItems from './ReceivedItems/ReceivedItems';\n\nconst App: React.FC = (): JSX.Element => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path='/list' component={BoughtItems}/>\n                <Route exact path='/received' component={ReceivedItems}/>\n                <Redirect from='/' to='/list'/>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}